name: train_diffusion_transformer_hybrid_cotrain
_target_: diffusion_policy.workspace.train_diffusion_transformer_hybrid_cotrain_workspace.TrainDiffusionTransformerHybridWorkspace

task:
  dataset:
    _target_: diffusion_policy.dataset.dexnex_meta_dataset.MetaDataset
    dataset:
      _target_: diffusion_policy.dataset.dexnex_pusht_image_dataset.PushTImageDataset
      horizon: 16
      state_length: 28
      max_train_episodes: null
      pad_after: 7
      pad_before: 1
      seed: 42
      val_ratio: 0.02
    zarr_paths: 
      - /media/dexnex_ssd/data/box_and_blocks.better.zarr
      - /media/dexnex_ssd/data/box_and_blocks.worse.zarr
      - /media/dexnex_ssd/data/block_transfer.cotraining.zarr
    ratios:
      - 0.5
      - 0.25
      - 0.25
    num_train_batches: 1400 # 50,000 / 0.5 / 64
    num_val_batches: 50
    batch_size: 64
  image_shape:
  - 3
  - 120
  - 120
  name: box_and_blocks
  shape_meta:
    action:
      shape:
      - 21
    obs:
      agent_pos:
        shape:
        - 28
        type: low_dim
      image:
        shape:
        - 3
        - 120
        - 120
        type: rgb

dataloader:
  num_workers: 16
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  num_workers: 0
  shuffle: False
  pin_memory: True
  persistent_workers: False


task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_cond: True

policy:
  _target_: diffusion_policy.policy.diffusion_transformer_hybrid_image_cotrain_policy.DiffusionTransformerHybridImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 16

  crop_shape: [110, 110]
  obs_encoder_group_norm: True
  eval_fixed_crop: True

  n_layer: 8
  n_cond_layers: 0  # >0: use transformer encoder for cond, otherwise use MLP
  n_head: 4
  n_emb: 256
  p_drop_emb: 0.0
  p_drop_attn: 0.3
  causal_attn: True
  time_as_cond: True # if false, use BERT like encoder only arch, time as input
  obs_as_cond: ${obs_as_cond}

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

optimizer:
  transformer_weight_decay: 1.0e-3
  obs_encoder_weight_decay: 1.0e-6
  learning_rate: 1.0e-4
  betas: [0.9, 0.95]

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  # Transformer needs LR warmup
  lr_warmup_steps: 1000
  num_epochs: 501
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 9999
  checkpoint_every: 50
  val_every: 20
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: epoch
    mode: max
    k: 5
    format_str: epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
